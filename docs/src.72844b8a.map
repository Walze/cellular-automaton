{"version":3,"sources":["src/Cell.ts","src/helpers.ts","src/index.ts"],"names":[],"mappings":"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","file":"src.72844b8a.map","sourceRoot":"..\\src","sourcesContent":["import { Graphics } from 'pixi.js'\r\n\r\nexport interface ICellContructor {\r\n  grid: Cell[][]\r\n  col: number\r\n  row: number\r\n  color?: string\r\n  x: number\r\n  y: number\r\n  w: number\r\n  h: number\r\n}\r\n\r\nexport interface INeighbors {\r\n  all: Cell[]\r\n  top: {\r\n    left: Cell\r\n    center: Cell\r\n    right: Cell\r\n  }\r\n  center: {\r\n    left: Cell\r\n    self: Cell\r\n    right: Cell\r\n  }\r\n  bottom: {\r\n    left: Cell\r\n    center: Cell\r\n    right: Cell\r\n  }\r\n}\r\n\r\nexport class Cell extends Graphics {\r\n\r\n  public readonly grid: Cell[][]\r\n  public col: number\r\n  public row: number\r\n  private _neighborhood: INeighbors | null = null\r\n\r\n  constructor(obj: ICellContructor) {\r\n    super()\r\n\r\n    this.col = obj.col\r\n    this.row = obj.row\r\n    this.grid = obj.grid\r\n\r\n    const color = Number(`0x${obj.color || 'FFFFFF'}`)\r\n\r\n    this.beginFill(color);\r\n    this.drawRect(obj.x, obj.y, obj.w, obj.h);\r\n    this.endFill();\r\n  }\r\n\r\n  public countActiveNeighbors() {\r\n    let sum = 0\r\n\r\n    this.neighborhood().all.map(neighbor => {\r\n      if (neighbor.visible) sum++\r\n    })\r\n\r\n    return sum\r\n  }\r\n\r\n  public neighborhood(): INeighbors {\r\n    if (this._neighborhood) return this._neighborhood\r\n\r\n    const cols = this.grid.length\r\n    const rows = this.grid[0].length\r\n\r\n    const neighbors = {\r\n      all: [] as Cell[],\r\n      top: {\r\n        left: this.grid[(this.col - 1 + cols) % cols][(this.row - 1 + rows) % rows],\r\n        center: this.grid[(this.col - 1 + cols) % cols][(this.row + rows) % rows],\r\n        right: this.grid[(this.col - 1 + cols) % cols][(this.row + 1 + rows) % rows]\r\n      },\r\n      center: {\r\n        left: this.grid[(this.col + cols) % cols][(this.row - 1 + rows) % rows],\r\n        self: this,\r\n        right: this.grid[(this.col + cols) % cols][(this.row + 1 + rows) % rows]\r\n      },\r\n      bottom: {\r\n        left: this.grid[(this.col + 1 + cols) % cols][(this.row - 1 + rows) % rows],\r\n        center: this.grid[(this.col + 1 + cols) % cols][(this.row + rows) % rows],\r\n        right: this.grid[(this.col + 1 + cols) % cols][(this.row + 1 + rows) % rows]\r\n      }\r\n    }\r\n\r\n    neighbors.all = [\r\n      neighbors.top.left,\r\n      neighbors.top.center,\r\n      neighbors.top.right,\r\n      neighbors.center.left,\r\n      neighbors.center.right,\r\n      neighbors.bottom.left,\r\n      neighbors.bottom.center,\r\n      neighbors.bottom.right,\r\n    ]\r\n\r\n    this._neighborhood = neighbors\r\n    return neighbors\r\n  }\r\n}\r\n","\r\nexport function make2DArray(colsN: number, rowsN: number): any[][] {\r\n  const arr = new Array(colsN)\r\n\r\n  for (let i = 0; i < arr.length; i++)\r\n    arr[i] = new Array(rowsN)\r\n\r\n  return arr\r\n}\r\n\r\nexport function map2d(grid: any[][], callback: (col: number, row: number) => any) {\r\n  for (let col = 0; col < grid.length; col++)\r\n    for (let row = 0; row < grid[0].length; row++) {\r\n      callback(col, row)\r\n    }\r\n}\r\n","import { Application } from 'pixi.js'\r\nimport { Cell, ICellContructor } from './Cell';\r\nimport { make2DArray, map2d } from './helpers';\r\n\r\nif (window.innerWidth < 800) alert('Mobile is not supported')\r\n\r\nconst APP = new Application({\r\n  view: document.querySelector('#canvas') as HTMLCanvasElement,\r\n  width: window.innerWidth,\r\n  height: window.innerHeight,\r\n  forceFXAA: true,\r\n  powerPreference: \"high-performance\",\r\n})\r\n\r\ndocument.body.appendChild(APP.view)\r\ndocument.addEventListener('contextmenu', e => e.preventDefault())\r\n\r\nconst RESO = 2\r\nconst cols = Math.round(APP.view.width / RESO)\r\nconst rows = Math.round(APP.view.height / RESO)\r\n\r\nconst grid: Cell[][] = make2DArray(cols, rows)\r\n\r\nconsole.log({ grid })\r\nconsole.log(`Rendered ${cols} Columns and ${rows} Rows`)\r\nconsole.log(`Width: ${APP.view.width}, Height: ${APP.view.height}`)\r\n\r\nmap2d(grid, (col, row) => {\r\n  const x = col * RESO\r\n  const y = row * RESO\r\n\r\n  const cellOptions: ICellContructor = {\r\n    grid,\r\n    x,\r\n    y,\r\n    w: RESO - 1,\r\n    h: RESO - 1,\r\n    col,\r\n    row,\r\n  }\r\n\r\n  grid[col][row] = new Cell(cellOptions)\r\n\r\n  grid[col][row].visible = false\r\n\r\n  APP.stage.addChild(grid[col][row])\r\n\r\n})\r\n\r\nconst ticker = APP.ticker.add((delta) => {\r\n  // console.log(Math.round(ticker.FPS))\r\n\r\n  map2d(grid, (col, row) => {\r\n\r\n    const cell = grid[col][row]\r\n\r\n    if (true) growConditions(cell);\r\n    // else notGrowConditions(cell);\r\n  })\r\n})\r\n\r\nticker.minFPS = 30\r\n\r\nAPP.view.addEventListener('mousedown', (e) => {\r\n  const cell = click(e)\r\n  cell!.visible = !cell!.visible\r\n\r\n  // APP.view.addEventListener('mousemove', event => {})\r\n})\r\n\r\nfunction growConditions(cell: Cell) {\r\n  const numNeightbours = cell.countActiveNeighbors()\r\n  const state = cell.visible\r\n\r\n  if (!state && numNeightbours === 3)\r\n    cell.visible = !cell.visible\r\n  else if (state && (numNeightbours === 0))\r\n    cell.neighborhood().all.map(neighbor => neighbor.visible = !neighbor.visible)\r\n  else if (state && (numNeightbours < 4 || numNeightbours > 7))\r\n    cell.visible = !cell.visible\r\n  else\r\n    cell.visible = state\r\n}\r\n\r\nfunction click(e: MouseEvent) {\r\n  if (e.target !== APP.view) return\r\n\r\n  const Col = Math.floor(e.pageX / RESO)\r\n  const Row = Math.floor(e.pageY / RESO)\r\n\r\n  return grid[Col][Row]\r\n}\r\n"]}